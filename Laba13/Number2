package Laba13;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

// не очень красиво, но работает

public class Number2 {
    public static void main(String[] args) {
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Tick();
            }
        });
    }

    public static void Tick(){

        JPanel fieldPanel;
        JLabel result;
        JButton start;
        JButton stop;

        JPanel toolsPanel;
        JSlider slider;

        JTextField field = new JTextField(10);
        field.setText(String.valueOf(0));

        JButton speed;

        Timer timer;

        toolsPanel = new JPanel();
        toolsPanel.setLayout(new BoxLayout(toolsPanel, BoxLayout.Y_AXIS));

        slider = new JSlider(0,1000);
        slider.setOrientation(JSlider.HORIZONTAL);
        slider.setMajorTickSpacing(100);

        slider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                int value = ((JSlider)e.getSource()).getValue();
                field.setText(String.valueOf(value));
            }
        });

        field.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                slider.setValue(Integer.parseInt(field.getText()));
            }
        });

        toolsPanel.add(slider);
        toolsPanel.add(field);
        toolsPanel.add(new JLabel());

        speed = new JButton("Скорость");
        speed.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                slider.setValue(Integer.parseInt(field.getText()));
            }
        });
        toolsPanel.add(speed);

        fieldPanel = new JPanel();
        fieldPanel.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));
        result = new JLabel("0");

        timer = new Timer(Integer.parseInt(field.getText()), new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                    int res = Integer.parseInt(result.getText());
                    result.setText(String.valueOf(res + 1));
                }
        });

        fieldPanel.add(result, BorderLayout.NORTH);

        start = new JButton("Запуск");
        start.setSize(20,10);
        start.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.setDelay(Integer.parseInt(field.getText()));
                timer.start();
            }
        });

        fieldPanel.add(start, BorderLayout.CENTER);

        stop = new JButton("Стоп");
        stop.setSize(20,10);
        stop.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timer.stop();
            }
        });

        fieldPanel.add(stop, BorderLayout.SOUTH);

        JFrame frame = new JFrame();
        frame.setSize(500,400);
        frame.setTitle("Тикает и считает");
        frame.setLocation(300,200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(new BorderLayout());
        frame.getContentPane().add(fieldPanel, BorderLayout.CENTER);
        frame.getContentPane().add(toolsPanel, BorderLayout.EAST);

        frame.setVisible(true);


    }
}
